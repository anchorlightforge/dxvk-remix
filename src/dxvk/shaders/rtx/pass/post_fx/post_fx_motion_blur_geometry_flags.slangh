/*
* Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/utility/packing.slangh"
#include "rtx/utility/shader_types.h"

struct MotionBlurSurfaceFlags
{
  bool isViewModel;
  bool isStatic;
  bool isEmissive;
  bool isMaskOut;
};

void motionBlurSurfaceFlagsWriteToGBuffer(
  MotionBlurSurfaceFlags motionBlurSurfaceFlags,
  ivec2 position,
  RWTexture2D<uint> motionBlurSurfaceFlagsTexture)
{
  uint encodedFlags = 0;
  encodedFlags = packedFlagSet(encodedFlags, motionBlurSurfaceFlags.isViewModel ? (1 << 0) : 0);
  encodedFlags = packedFlagSet(encodedFlags, motionBlurSurfaceFlags.isStatic ? (1 << 1) : 0);
  encodedFlags = packedFlagSet(encodedFlags, motionBlurSurfaceFlags.isEmissive ? (1 << 2) : 0);
  encodedFlags = packedFlagSet(encodedFlags, motionBlurSurfaceFlags.isMaskOut ? (1 << 3) : 0);

  motionBlurSurfaceFlagsTexture[position] = encodedFlags;
}

MotionBlurSurfaceFlags motionBlurSurfaceFlagsReadFromGBuffer(const uint encodedFlags)
{
  MotionBlurSurfaceFlags motionBlurSurfaceFlags;
  motionBlurSurfaceFlags.isViewModel   = packedFlagGet(encodedFlags, (1 << 0));
  motionBlurSurfaceFlags.isStatic      = packedFlagGet(encodedFlags, (1 << 1));
  motionBlurSurfaceFlags.isEmissive    = packedFlagGet(encodedFlags, (1 << 2));
  motionBlurSurfaceFlags.isMaskOut     = packedFlagGet(encodedFlags, (1 << 3));

  return motionBlurSurfaceFlags;
}
